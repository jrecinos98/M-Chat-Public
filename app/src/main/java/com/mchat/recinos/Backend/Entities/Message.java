package com.mchat.recinos.Backend.Entities;

import android.graphics.Bitmap;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import com.mchat.recinos.Util.BitmapTransform;
import com.mchat.recinos.Util.CONSTANTS;

import org.w3c.dom.Text;

import java.io.Serializable;

import Protobuf.ProtoMessage;

// TODO implement Parcelable as it may come in bundle on Resume
@Entity (tableName = "messages")
public class Message implements Serializable {
    //TODO primary key should not be autogenerated.
    @PrimaryKey (autoGenerate = true)
    private int id= 0;

    //ID of the chat these messages belong to
    private int owner_cid;

    private int type;

    //Not sure if I should extract time_stamp to
    @ColumnInfo(name = "time_stamp")
    private long timeStamp;

    @ColumnInfo(name = "belongs_to_user")
    private boolean belongsToUser; // is this message sent by us?

    private boolean seen;

    //Text can be used to store text data or if the type isn't text then it will be the video URI/File name
    private String data;

    @Ignore
    private String preview;

    public Message(int id, int owner_cid, int type, long timeStamp, boolean belongsToUser, boolean seen, String data ){
        this.id = id;
        this.owner_cid = owner_cid;
        this.type = type;
        this.timeStamp = timeStamp;
        this.belongsToUser = belongsToUser;
        this.seen = seen;
        this.data =data;

    }
    @Ignore
    public Message(){
        type = CONSTANTS.MESSAGE_DATA_TYPES.TEXT;
        this.data = "";
        preview = "";
    }
    @Ignore
    public Message(Message message){
        this.id = message.getId();
        this.owner_cid = message.getOwner_cid();
        this.type = message.getType();
        this.timeStamp = message.getTimeStamp();
        this.belongsToUser= message.getBelongsToUser();
        this.seen = message.getSeen();
        this.data = message.getData();
        this.preview = message.getPreview();
    }
    //Used when we don't know who the owner is on create (like on the client)
    @Ignore
    public Message(String data, String preview, long time, int type, boolean belongsToUser) {
        //Initially equal to belongsToUser
        this.type = type;
        this.timeStamp = time;
        this.belongsToUser = belongsToUser;
        this.seen = belongsToUser;
        this.data = data;
        this.preview = preview;
    }
    //When all data is known.
    @Ignore
    public Message(int cid, String data, String preview, long time, int type, boolean belongsToUser) {
        //Initially equal to belongsToUser
        this.owner_cid = cid;
        this.type = type;
        this.timeStamp = time;
        this.belongsToUser = belongsToUser;
        this.seen = belongsToUser;
        this.data = data;
        this.preview = preview;
    }
    @Ignore
    public ProtoMessage.Payload toProtoBufPayload(){
        ProtoMessage.Payload payload = ProtoMessage.Payload.newBuilder()
                .setOpCode(CONSTANTS.MESSAGE_DATA_TYPES.TEXT)
                .setText("")
                .build();
        return payload;
    }

    public void setId(int id){this.id = id;}
    public void setOwner_cid(int cid){this.owner_cid = cid;}
    public void setType(int type){this.type = type;}
    public void setTimeStamp(long time){timeStamp = time;}
    public void setBelongsToUser(boolean user){this.belongsToUser = user;}
    public void setSeen(boolean seen){ this.seen = seen;}
    public void setData(String text){ this.data =text;}
    public void setPreview(String preview){ this.preview= preview;}


    public int getId(){return id;}
    public int getOwner_cid(){return owner_cid;}
    public int getType() {return  type;}
    public long getTimeStamp(){return timeStamp;}
    public boolean getBelongsToUser(){return this.belongsToUser;}
    public boolean getSeen() {return this.seen;}
    public String getData(){ return this.data;}
    public String getPreview() { return preview;}

    /**
     * @param message The raw message received by client
     * @param receivedTime The time the message was received
     * @return Message object
     */
    @Ignore
    public static Message parseProtoBuf(ProtoMessage.Payload message , long receivedTime){
        Message msg = null;
        if (message.getOpCode() == CONSTANTS.MESSAGE_DATA_TYPES.TEXT){
            //text = Encryption.decryptMessage(text);
            msg = new TextMessage( message.getText(),  receivedTime, false);
        }
        else if(message.getOpCode() == CONSTANTS.MESSAGE_DATA_TYPES.IMAGE ){
            byte[] imageBytes = message.getData().toByteArray();
            msg = new ImageMessage(BitmapTransform.SerialBitmap.toBitmap(imageBytes), receivedTime,false);
        }
        return msg;
    }
    @Ignore
    public ImageMessage toImageMessage(){
        return new ImageMessage(this);
    }
    @Ignore
    public TextMessage toTextMessage(){
        return  new TextMessage(this);
    }
}
