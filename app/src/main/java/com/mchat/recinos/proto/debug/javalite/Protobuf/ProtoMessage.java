// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

package Protobuf;

public final class ProtoMessage {
  private ProtoMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface AuthenticationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:message.Authentication)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required uint32 type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required uint32 type = 1;</code>
     */
    int getType();

    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    boolean hasSenderUid();
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    java.lang.String getSenderUid();
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    com.google.protobuf.ByteString
        getSenderUidBytes();

    /**
     * <pre>
     *TODO Require token or something to know they are legit when authenticating
     * </pre>
     *
     * <code>optional bytes token = 3;</code>
     */
    boolean hasToken();
    /**
     * <pre>
     *TODO Require token or something to know they are legit when authenticating
     * </pre>
     *
     * <code>optional bytes token = 3;</code>
     */
    com.google.protobuf.ByteString getToken();
  }
  /**
   * <pre>
   *TODO To figure out how to determine what chat to add group message to.
   *TODO modify Chat Entity to be able to hold a list of UIDs (group chats)
   * </pre>
   *
   * Protobuf type {@code message.Authentication}
   */
  public  static final class Authentication extends
      com.google.protobuf.GeneratedMessageLite<
          Authentication, Authentication.Builder> implements
      // @@protoc_insertion_point(message_implements:message.Authentication)
      AuthenticationOrBuilder {
    private Authentication() {
      senderUid_ = "";
      token_ = com.google.protobuf.ByteString.EMPTY;
    }
    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>required uint32 type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }
    /**
     * <code>required uint32 type = 1;</code>
     */
    private void setType(int value) {
      bitField0_ |= 0x00000001;
      type_ = value;
    }
    /**
     * <code>required uint32 type = 1;</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
    }

    public static final int SENDER_UID_FIELD_NUMBER = 2;
    private java.lang.String senderUid_;
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    public boolean hasSenderUid() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    public java.lang.String getSenderUid() {
      return senderUid_;
    }
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSenderUidBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(senderUid_);
    }
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    private void setSenderUid(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      senderUid_ = value;
    }
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    private void clearSenderUid() {
      bitField0_ = (bitField0_ & ~0x00000002);
      senderUid_ = getDefaultInstance().getSenderUid();
    }
    /**
     * <pre>
     *For authentication
     * </pre>
     *
     * <code>required string sender_uid = 2;</code>
     */
    private void setSenderUidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      senderUid_ = value.toStringUtf8();
    }

    public static final int TOKEN_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString token_;
    /**
     * <pre>
     *TODO Require token or something to know they are legit when authenticating
     * </pre>
     *
     * <code>optional bytes token = 3;</code>
     */
    public boolean hasToken() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *TODO Require token or something to know they are legit when authenticating
     * </pre>
     *
     * <code>optional bytes token = 3;</code>
     */
    public com.google.protobuf.ByteString getToken() {
      return token_;
    }
    /**
     * <pre>
     *TODO Require token or something to know they are legit when authenticating
     * </pre>
     *
     * <code>optional bytes token = 3;</code>
     */
    private void setToken(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      token_ = value;
    }
    /**
     * <pre>
     *TODO Require token or something to know they are legit when authenticating
     * </pre>
     *
     * <code>optional bytes token = 3;</code>
     */
    private void clearToken() {
      bitField0_ = (bitField0_ & ~0x00000004);
      token_ = getDefaultInstance().getToken();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeString(2, getSenderUid());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, token_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getSenderUid());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, token_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static Protobuf.ProtoMessage.Authentication parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Authentication parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Authentication parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Authentication parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Authentication parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Authentication parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Authentication parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Authentication parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Authentication parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Authentication parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Protobuf.ProtoMessage.Authentication prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *TODO To figure out how to determine what chat to add group message to.
     *TODO modify Chat Entity to be able to hold a list of UIDs (group chats)
     * </pre>
     *
     * Protobuf type {@code message.Authentication}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          Protobuf.ProtoMessage.Authentication, Builder> implements
        // @@protoc_insertion_point(builder_implements:message.Authentication)
        Protobuf.ProtoMessage.AuthenticationOrBuilder {
      // Construct using Protobuf.ProtoMessage.Authentication.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>required uint32 type = 1;</code>
       */
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <code>required uint32 type = 1;</code>
       */
      public int getType() {
        return instance.getType();
      }
      /**
       * <code>required uint32 type = 1;</code>
       */
      public Builder setType(int value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>required uint32 type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       *For authentication
       * </pre>
       *
       * <code>required string sender_uid = 2;</code>
       */
      public boolean hasSenderUid() {
        return instance.hasSenderUid();
      }
      /**
       * <pre>
       *For authentication
       * </pre>
       *
       * <code>required string sender_uid = 2;</code>
       */
      public java.lang.String getSenderUid() {
        return instance.getSenderUid();
      }
      /**
       * <pre>
       *For authentication
       * </pre>
       *
       * <code>required string sender_uid = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSenderUidBytes() {
        return instance.getSenderUidBytes();
      }
      /**
       * <pre>
       *For authentication
       * </pre>
       *
       * <code>required string sender_uid = 2;</code>
       */
      public Builder setSenderUid(
          java.lang.String value) {
        copyOnWrite();
        instance.setSenderUid(value);
        return this;
      }
      /**
       * <pre>
       *For authentication
       * </pre>
       *
       * <code>required string sender_uid = 2;</code>
       */
      public Builder clearSenderUid() {
        copyOnWrite();
        instance.clearSenderUid();
        return this;
      }
      /**
       * <pre>
       *For authentication
       * </pre>
       *
       * <code>required string sender_uid = 2;</code>
       */
      public Builder setSenderUidBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSenderUidBytes(value);
        return this;
      }

      /**
       * <pre>
       *TODO Require token or something to know they are legit when authenticating
       * </pre>
       *
       * <code>optional bytes token = 3;</code>
       */
      public boolean hasToken() {
        return instance.hasToken();
      }
      /**
       * <pre>
       *TODO Require token or something to know they are legit when authenticating
       * </pre>
       *
       * <code>optional bytes token = 3;</code>
       */
      public com.google.protobuf.ByteString getToken() {
        return instance.getToken();
      }
      /**
       * <pre>
       *TODO Require token or something to know they are legit when authenticating
       * </pre>
       *
       * <code>optional bytes token = 3;</code>
       */
      public Builder setToken(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setToken(value);
        return this;
      }
      /**
       * <pre>
       *TODO Require token or something to know they are legit when authenticating
       * </pre>
       *
       * <code>optional bytes token = 3;</code>
       */
      public Builder clearToken() {
        copyOnWrite();
        instance.clearToken();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:message.Authentication)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Protobuf.ProtoMessage.Authentication();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasType()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasSenderUid()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Protobuf.ProtoMessage.Authentication other = (Protobuf.ProtoMessage.Authentication) arg1;
          type_ = visitor.visitInt(
              hasType(), type_,
              other.hasType(), other.type_);
          senderUid_ = visitor.visitString(
              hasSenderUid(), senderUid_,
              other.hasSenderUid(), other.senderUid_);
          token_ = visitor.visitByteString(
              hasToken(), token_,
              other.hasToken(), other.token_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  type_ = input.readUInt32();
                  break;
                }
                case 18: {
                  String s = input.readString();
                  bitField0_ |= 0x00000002;
                  senderUid_ = s;
                  break;
                }
                case 26: {
                  bitField0_ |= 0x00000004;
                  token_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Protobuf.ProtoMessage.Authentication.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:message.Authentication)
    private static final Protobuf.ProtoMessage.Authentication DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Authentication();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Protobuf.ProtoMessage.Authentication getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Authentication> PARSER;

    public static com.google.protobuf.Parser<Authentication> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:message.Ack)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required uint32 type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required uint32 type = 1;</code>
     */
    int getType();

    /**
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    boolean hasMsgId();
    /**
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    int getMsgId();
  }
  /**
   * Protobuf type {@code message.Ack}
   */
  public  static final class Ack extends
      com.google.protobuf.GeneratedMessageLite<
          Ack, Ack.Builder> implements
      // @@protoc_insertion_point(message_implements:message.Ack)
      AckOrBuilder {
    private Ack() {
    }
    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>required uint32 type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }
    /**
     * <code>required uint32 type = 1;</code>
     */
    private void setType(int value) {
      bitField0_ |= 0x00000001;
      type_ = value;
    }
    /**
     * <code>required uint32 type = 1;</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
    }

    public static final int MSG_ID_FIELD_NUMBER = 2;
    private int msgId_;
    /**
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    public boolean hasMsgId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    public int getMsgId() {
      return msgId_;
    }
    /**
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    private void setMsgId(int value) {
      bitField0_ |= 0x00000002;
      msgId_ = value;
    }
    /**
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    private void clearMsgId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      msgId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, msgId_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, msgId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static Protobuf.ProtoMessage.Ack parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Ack parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Ack parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Ack parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Ack parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Ack parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Ack parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Ack parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Ack parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Ack parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Protobuf.ProtoMessage.Ack prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code message.Ack}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          Protobuf.ProtoMessage.Ack, Builder> implements
        // @@protoc_insertion_point(builder_implements:message.Ack)
        Protobuf.ProtoMessage.AckOrBuilder {
      // Construct using Protobuf.ProtoMessage.Ack.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>required uint32 type = 1;</code>
       */
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <code>required uint32 type = 1;</code>
       */
      public int getType() {
        return instance.getType();
      }
      /**
       * <code>required uint32 type = 1;</code>
       */
      public Builder setType(int value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>required uint32 type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public boolean hasMsgId() {
        return instance.hasMsgId();
      }
      /**
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public int getMsgId() {
        return instance.getMsgId();
      }
      /**
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public Builder setMsgId(int value) {
        copyOnWrite();
        instance.setMsgId(value);
        return this;
      }
      /**
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public Builder clearMsgId() {
        copyOnWrite();
        instance.clearMsgId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:message.Ack)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Protobuf.ProtoMessage.Ack();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasType()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasMsgId()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Protobuf.ProtoMessage.Ack other = (Protobuf.ProtoMessage.Ack) arg1;
          type_ = visitor.visitInt(
              hasType(), type_,
              other.hasType(), other.type_);
          msgId_ = visitor.visitInt(
              hasMsgId(), msgId_,
              other.hasMsgId(), other.msgId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  type_ = input.readUInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  msgId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Protobuf.ProtoMessage.Ack.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:message.Ack)
    private static final Protobuf.ProtoMessage.Ack DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Ack();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Protobuf.ProtoMessage.Ack getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Ack> PARSER;

    public static com.google.protobuf.Parser<Ack> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface MessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:message.Message)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
     *3 can be single person message, 4 can signify group chat
     *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
     * </pre>
     *
     * <code>required uint32 type = 1;</code>
     */
    boolean hasType();
    /**
     * <pre>
     *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
     *3 can be single person message, 4 can signify group chat
     *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
     * </pre>
     *
     * <code>required uint32 type = 1;</code>
     */
    int getType();

    /**
     * <pre>
     *ID of the message that was received, or ID of message that we are sending ACK for.
     *There can be a default ID for auth messages (if type is auth then dont even check)
     * </pre>
     *
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    boolean hasMsgId();
    /**
     * <pre>
     *ID of the message that was received, or ID of message that we are sending ACK for.
     *There can be a default ID for auth messages (if type is auth then dont even check)
     * </pre>
     *
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    int getMsgId();

    /**
     * <code>optional string sender_uid = 3;</code>
     */
    boolean hasSenderUid();
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    java.lang.String getSenderUid();
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    com.google.protobuf.ByteString
        getSenderUidBytes();

    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    boolean hasDestUid();
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    java.lang.String getDestUid();
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    com.google.protobuf.ByteString
        getDestUidBytes();

    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    java.lang.String getKey();
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    boolean hasMessage();
    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    Protobuf.ProtoMessage.Payload getMessage();

    /**
     * <code>optional uint64 time_stamp = 7;</code>
     */
    boolean hasTimeStamp();
    /**
     * <code>optional uint64 time_stamp = 7;</code>
     */
    long getTimeStamp();
  }
  /**
   * Protobuf type {@code message.Message}
   */
  public  static final class Message extends
      com.google.protobuf.GeneratedMessageLite<
          Message, Message.Builder> implements
      // @@protoc_insertion_point(message_implements:message.Message)
      MessageOrBuilder {
    private Message() {
      senderUid_ = "";
      destUid_ = "";
      key_ = "";
    }
    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
     *3 can be single person message, 4 can signify group chat
     *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
     * </pre>
     *
     * <code>required uint32 type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
     *3 can be single person message, 4 can signify group chat
     *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
     * </pre>
     *
     * <code>required uint32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }
    /**
     * <pre>
     *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
     *3 can be single person message, 4 can signify group chat
     *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
     * </pre>
     *
     * <code>required uint32 type = 1;</code>
     */
    private void setType(int value) {
      bitField0_ |= 0x00000001;
      type_ = value;
    }
    /**
     * <pre>
     *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
     *3 can be single person message, 4 can signify group chat
     *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
     * </pre>
     *
     * <code>required uint32 type = 1;</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
    }

    public static final int MSG_ID_FIELD_NUMBER = 2;
    private int msgId_;
    /**
     * <pre>
     *ID of the message that was received, or ID of message that we are sending ACK for.
     *There can be a default ID for auth messages (if type is auth then dont even check)
     * </pre>
     *
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    public boolean hasMsgId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *ID of the message that was received, or ID of message that we are sending ACK for.
     *There can be a default ID for auth messages (if type is auth then dont even check)
     * </pre>
     *
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    public int getMsgId() {
      return msgId_;
    }
    /**
     * <pre>
     *ID of the message that was received, or ID of message that we are sending ACK for.
     *There can be a default ID for auth messages (if type is auth then dont even check)
     * </pre>
     *
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    private void setMsgId(int value) {
      bitField0_ |= 0x00000002;
      msgId_ = value;
    }
    /**
     * <pre>
     *ID of the message that was received, or ID of message that we are sending ACK for.
     *There can be a default ID for auth messages (if type is auth then dont even check)
     * </pre>
     *
     * <code>required uint32 msg_id = 2 [default = 0];</code>
     */
    private void clearMsgId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      msgId_ = 0;
    }

    public static final int SENDER_UID_FIELD_NUMBER = 3;
    private java.lang.String senderUid_;
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    public boolean hasSenderUid() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    public java.lang.String getSenderUid() {
      return senderUid_;
    }
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    public com.google.protobuf.ByteString
        getSenderUidBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(senderUid_);
    }
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    private void setSenderUid(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      senderUid_ = value;
    }
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    private void clearSenderUid() {
      bitField0_ = (bitField0_ & ~0x00000004);
      senderUid_ = getDefaultInstance().getSenderUid();
    }
    /**
     * <code>optional string sender_uid = 3;</code>
     */
    private void setSenderUidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      senderUid_ = value.toStringUtf8();
    }

    public static final int DEST_UID_FIELD_NUMBER = 4;
    private java.lang.String destUid_;
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    public boolean hasDestUid() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    public java.lang.String getDestUid() {
      return destUid_;
    }
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDestUidBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(destUid_);
    }
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    private void setDestUid(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      destUid_ = value;
    }
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    private void clearDestUid() {
      bitField0_ = (bitField0_ & ~0x00000008);
      destUid_ = getDefaultInstance().getDestUid();
    }
    /**
     * <pre>
     *TODO Making this field repeated can allow for multiple uid (aka group chats)
     * </pre>
     *
     * <code>optional string dest_uid = 4;</code>
     */
    private void setDestUidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      destUid_ = value.toStringUtf8();
    }

    public static final int KEY_FIELD_NUMBER = 5;
    private java.lang.String key_;
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    public java.lang.String getKey() {
      return key_;
    }
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(key_);
    }
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    private void setKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      key_ = value;
    }
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    private void clearKey() {
      bitField0_ = (bitField0_ & ~0x00000010);
      key_ = getDefaultInstance().getKey();
    }
    /**
     * <pre>
     *TODO make it required passing the encrypted key used to encrypt the message
     * </pre>
     *
     * <code>optional string key = 5;</code>
     */
    private void setKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      key_ = value.toStringUtf8();
    }

    public static final int MESSAGE_FIELD_NUMBER = 6;
    private Protobuf.ProtoMessage.Payload message_;
    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    public Protobuf.ProtoMessage.Payload getMessage() {
      return message_ == null ? Protobuf.ProtoMessage.Payload.getDefaultInstance() : message_;
    }
    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    private void setMessage(Protobuf.ProtoMessage.Payload value) {
      if (value == null) {
        throw new NullPointerException();
      }
      message_ = value;
      bitField0_ |= 0x00000020;
      }
    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    private void setMessage(
        Protobuf.ProtoMessage.Payload.Builder builderForValue) {
      message_ = builderForValue.build();
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    private void mergeMessage(Protobuf.ProtoMessage.Payload value) {
      if (message_ != null &&
          message_ != Protobuf.ProtoMessage.Payload.getDefaultInstance()) {
        message_ =
          Protobuf.ProtoMessage.Payload.newBuilder(message_).mergeFrom(value).buildPartial();
      } else {
        message_ = value;
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     *May want to make this repeated so that firebase messages can be  send  together
     * </pre>
     *
     * <code>optional .message.Payload message = 6;</code>
     */
    private void clearMessage() {  message_ = null;
      bitField0_ = (bitField0_ & ~0x00000020);
    }

    public static final int TIME_STAMP_FIELD_NUMBER = 7;
    private long timeStamp_;
    /**
     * <code>optional uint64 time_stamp = 7;</code>
     */
    public boolean hasTimeStamp() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint64 time_stamp = 7;</code>
     */
    public long getTimeStamp() {
      return timeStamp_;
    }
    /**
     * <code>optional uint64 time_stamp = 7;</code>
     */
    private void setTimeStamp(long value) {
      bitField0_ |= 0x00000040;
      timeStamp_ = value;
    }
    /**
     * <code>optional uint64 time_stamp = 7;</code>
     */
    private void clearTimeStamp() {
      bitField0_ = (bitField0_ & ~0x00000040);
      timeStamp_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, msgId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeString(3, getSenderUid());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeString(4, getDestUid());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeString(5, getKey());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getMessage());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt64(7, timeStamp_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, msgId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getSenderUid());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getDestUid());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getKey());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getMessage());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, timeStamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static Protobuf.ProtoMessage.Message parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Message parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Message parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Message parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Message parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Message parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Message parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Message parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Message parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Message parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Protobuf.ProtoMessage.Message prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code message.Message}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          Protobuf.ProtoMessage.Message, Builder> implements
        // @@protoc_insertion_point(builder_implements:message.Message)
        Protobuf.ProtoMessage.MessageOrBuilder {
      // Construct using Protobuf.ProtoMessage.Message.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
       *3 can be single person message, 4 can signify group chat
       *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
       * </pre>
       *
       * <code>required uint32 type = 1;</code>
       */
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <pre>
       *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
       *3 can be single person message, 4 can signify group chat
       *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
       * </pre>
       *
       * <code>required uint32 type = 1;</code>
       */
      public int getType() {
        return instance.getType();
      }
      /**
       * <pre>
       *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
       *3 can be single person message, 4 can signify group chat
       *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
       * </pre>
       *
       * <code>required uint32 type = 1;</code>
       */
      public Builder setType(int value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       *Some types can be reserved to ACK. 1 can acknowledge auth, 2 acknowledge regular message etc..
       *3 can be single person message, 4 can signify group chat
       *Another (5 maybe) can be used to represent a message that was retrieved from firestore. These messages will have the time stamp set so the receiver knows when it was sent
       * </pre>
       *
       * <code>required uint32 type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       *ID of the message that was received, or ID of message that we are sending ACK for.
       *There can be a default ID for auth messages (if type is auth then dont even check)
       * </pre>
       *
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public boolean hasMsgId() {
        return instance.hasMsgId();
      }
      /**
       * <pre>
       *ID of the message that was received, or ID of message that we are sending ACK for.
       *There can be a default ID for auth messages (if type is auth then dont even check)
       * </pre>
       *
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public int getMsgId() {
        return instance.getMsgId();
      }
      /**
       * <pre>
       *ID of the message that was received, or ID of message that we are sending ACK for.
       *There can be a default ID for auth messages (if type is auth then dont even check)
       * </pre>
       *
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public Builder setMsgId(int value) {
        copyOnWrite();
        instance.setMsgId(value);
        return this;
      }
      /**
       * <pre>
       *ID of the message that was received, or ID of message that we are sending ACK for.
       *There can be a default ID for auth messages (if type is auth then dont even check)
       * </pre>
       *
       * <code>required uint32 msg_id = 2 [default = 0];</code>
       */
      public Builder clearMsgId() {
        copyOnWrite();
        instance.clearMsgId();
        return this;
      }

      /**
       * <code>optional string sender_uid = 3;</code>
       */
      public boolean hasSenderUid() {
        return instance.hasSenderUid();
      }
      /**
       * <code>optional string sender_uid = 3;</code>
       */
      public java.lang.String getSenderUid() {
        return instance.getSenderUid();
      }
      /**
       * <code>optional string sender_uid = 3;</code>
       */
      public com.google.protobuf.ByteString
          getSenderUidBytes() {
        return instance.getSenderUidBytes();
      }
      /**
       * <code>optional string sender_uid = 3;</code>
       */
      public Builder setSenderUid(
          java.lang.String value) {
        copyOnWrite();
        instance.setSenderUid(value);
        return this;
      }
      /**
       * <code>optional string sender_uid = 3;</code>
       */
      public Builder clearSenderUid() {
        copyOnWrite();
        instance.clearSenderUid();
        return this;
      }
      /**
       * <code>optional string sender_uid = 3;</code>
       */
      public Builder setSenderUidBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSenderUidBytes(value);
        return this;
      }

      /**
       * <pre>
       *TODO Making this field repeated can allow for multiple uid (aka group chats)
       * </pre>
       *
       * <code>optional string dest_uid = 4;</code>
       */
      public boolean hasDestUid() {
        return instance.hasDestUid();
      }
      /**
       * <pre>
       *TODO Making this field repeated can allow for multiple uid (aka group chats)
       * </pre>
       *
       * <code>optional string dest_uid = 4;</code>
       */
      public java.lang.String getDestUid() {
        return instance.getDestUid();
      }
      /**
       * <pre>
       *TODO Making this field repeated can allow for multiple uid (aka group chats)
       * </pre>
       *
       * <code>optional string dest_uid = 4;</code>
       */
      public com.google.protobuf.ByteString
          getDestUidBytes() {
        return instance.getDestUidBytes();
      }
      /**
       * <pre>
       *TODO Making this field repeated can allow for multiple uid (aka group chats)
       * </pre>
       *
       * <code>optional string dest_uid = 4;</code>
       */
      public Builder setDestUid(
          java.lang.String value) {
        copyOnWrite();
        instance.setDestUid(value);
        return this;
      }
      /**
       * <pre>
       *TODO Making this field repeated can allow for multiple uid (aka group chats)
       * </pre>
       *
       * <code>optional string dest_uid = 4;</code>
       */
      public Builder clearDestUid() {
        copyOnWrite();
        instance.clearDestUid();
        return this;
      }
      /**
       * <pre>
       *TODO Making this field repeated can allow for multiple uid (aka group chats)
       * </pre>
       *
       * <code>optional string dest_uid = 4;</code>
       */
      public Builder setDestUidBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDestUidBytes(value);
        return this;
      }

      /**
       * <pre>
       *TODO make it required passing the encrypted key used to encrypt the message
       * </pre>
       *
       * <code>optional string key = 5;</code>
       */
      public boolean hasKey() {
        return instance.hasKey();
      }
      /**
       * <pre>
       *TODO make it required passing the encrypted key used to encrypt the message
       * </pre>
       *
       * <code>optional string key = 5;</code>
       */
      public java.lang.String getKey() {
        return instance.getKey();
      }
      /**
       * <pre>
       *TODO make it required passing the encrypted key used to encrypt the message
       * </pre>
       *
       * <code>optional string key = 5;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        return instance.getKeyBytes();
      }
      /**
       * <pre>
       *TODO make it required passing the encrypted key used to encrypt the message
       * </pre>
       *
       * <code>optional string key = 5;</code>
       */
      public Builder setKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setKey(value);
        return this;
      }
      /**
       * <pre>
       *TODO make it required passing the encrypted key used to encrypt the message
       * </pre>
       *
       * <code>optional string key = 5;</code>
       */
      public Builder clearKey() {
        copyOnWrite();
        instance.clearKey();
        return this;
      }
      /**
       * <pre>
       *TODO make it required passing the encrypted key used to encrypt the message
       * </pre>
       *
       * <code>optional string key = 5;</code>
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setKeyBytes(value);
        return this;
      }

      /**
       * <pre>
       *May want to make this repeated so that firebase messages can be  send  together
       * </pre>
       *
       * <code>optional .message.Payload message = 6;</code>
       */
      public boolean hasMessage() {
        return instance.hasMessage();
      }
      /**
       * <pre>
       *May want to make this repeated so that firebase messages can be  send  together
       * </pre>
       *
       * <code>optional .message.Payload message = 6;</code>
       */
      public Protobuf.ProtoMessage.Payload getMessage() {
        return instance.getMessage();
      }
      /**
       * <pre>
       *May want to make this repeated so that firebase messages can be  send  together
       * </pre>
       *
       * <code>optional .message.Payload message = 6;</code>
       */
      public Builder setMessage(Protobuf.ProtoMessage.Payload value) {
        copyOnWrite();
        instance.setMessage(value);
        return this;
        }
      /**
       * <pre>
       *May want to make this repeated so that firebase messages can be  send  together
       * </pre>
       *
       * <code>optional .message.Payload message = 6;</code>
       */
      public Builder setMessage(
          Protobuf.ProtoMessage.Payload.Builder builderForValue) {
        copyOnWrite();
        instance.setMessage(builderForValue);
        return this;
      }
      /**
       * <pre>
       *May want to make this repeated so that firebase messages can be  send  together
       * </pre>
       *
       * <code>optional .message.Payload message = 6;</code>
       */
      public Builder mergeMessage(Protobuf.ProtoMessage.Payload value) {
        copyOnWrite();
        instance.mergeMessage(value);
        return this;
      }
      /**
       * <pre>
       *May want to make this repeated so that firebase messages can be  send  together
       * </pre>
       *
       * <code>optional .message.Payload message = 6;</code>
       */
      public Builder clearMessage() {  copyOnWrite();
        instance.clearMessage();
        return this;
      }

      /**
       * <code>optional uint64 time_stamp = 7;</code>
       */
      public boolean hasTimeStamp() {
        return instance.hasTimeStamp();
      }
      /**
       * <code>optional uint64 time_stamp = 7;</code>
       */
      public long getTimeStamp() {
        return instance.getTimeStamp();
      }
      /**
       * <code>optional uint64 time_stamp = 7;</code>
       */
      public Builder setTimeStamp(long value) {
        copyOnWrite();
        instance.setTimeStamp(value);
        return this;
      }
      /**
       * <code>optional uint64 time_stamp = 7;</code>
       */
      public Builder clearTimeStamp() {
        copyOnWrite();
        instance.clearTimeStamp();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:message.Message)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Protobuf.ProtoMessage.Message();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasType()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasMsgId()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (hasMessage()) {
            if (!getMessage().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Protobuf.ProtoMessage.Message other = (Protobuf.ProtoMessage.Message) arg1;
          type_ = visitor.visitInt(
              hasType(), type_,
              other.hasType(), other.type_);
          msgId_ = visitor.visitInt(
              hasMsgId(), msgId_,
              other.hasMsgId(), other.msgId_);
          senderUid_ = visitor.visitString(
              hasSenderUid(), senderUid_,
              other.hasSenderUid(), other.senderUid_);
          destUid_ = visitor.visitString(
              hasDestUid(), destUid_,
              other.hasDestUid(), other.destUid_);
          key_ = visitor.visitString(
              hasKey(), key_,
              other.hasKey(), other.key_);
          message_ = visitor.visitMessage(message_, other.message_);
          timeStamp_ = visitor.visitLong(
              hasTimeStamp(), timeStamp_,
              other.hasTimeStamp(), other.timeStamp_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  type_ = input.readUInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  msgId_ = input.readUInt32();
                  break;
                }
                case 26: {
                  String s = input.readString();
                  bitField0_ |= 0x00000004;
                  senderUid_ = s;
                  break;
                }
                case 34: {
                  String s = input.readString();
                  bitField0_ |= 0x00000008;
                  destUid_ = s;
                  break;
                }
                case 42: {
                  String s = input.readString();
                  bitField0_ |= 0x00000010;
                  key_ = s;
                  break;
                }
                case 50: {
                  Protobuf.ProtoMessage.Payload.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    subBuilder = message_.toBuilder();
                  }
                  message_ = input.readMessage(Protobuf.ProtoMessage.Payload.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(message_);
                    message_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000020;
                  break;
                }
                case 56: {
                  bitField0_ |= 0x00000040;
                  timeStamp_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Protobuf.ProtoMessage.Message.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:message.Message)
    private static final Protobuf.ProtoMessage.Message DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Message();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Protobuf.ProtoMessage.Message getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Message> PARSER;

    public static com.google.protobuf.Parser<Message> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:message.Payload)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *Type of message
     * </pre>
     *
     * <code>required uint32 op_code = 1 [default = 0];</code>
     */
    boolean hasOpCode();
    /**
     * <pre>
     *Type of message
     * </pre>
     *
     * <code>required uint32 op_code = 1 [default = 0];</code>
     */
    int getOpCode();

    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    boolean hasHash();
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    java.lang.String getHash();
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    com.google.protobuf.ByteString
        getHashBytes();

    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    boolean hasText();
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <pre>
     *For images, audio, video, etc.. (can be distinguished based on the type
     *Repeated means multiple files of same type can be sent at once
     * </pre>
     *
     * <code>optional bytes data = 4;</code>
     */
    boolean hasData();
    /**
     * <pre>
     *For images, audio, video, etc.. (can be distinguished based on the type
     *Repeated means multiple files of same type can be sent at once
     * </pre>
     *
     * <code>optional bytes data = 4;</code>
     */
    com.google.protobuf.ByteString getData();

    /**
     * <code>optional string mime_type = 5;</code>
     */
    boolean hasMimeType();
    /**
     * <code>optional string mime_type = 5;</code>
     */
    java.lang.String getMimeType();
    /**
     * <code>optional string mime_type = 5;</code>
     */
    com.google.protobuf.ByteString
        getMimeTypeBytes();
  }
  /**
   * Protobuf type {@code message.Payload}
   */
  public  static final class Payload extends
      com.google.protobuf.GeneratedMessageLite<
          Payload, Payload.Builder> implements
      // @@protoc_insertion_point(message_implements:message.Payload)
      PayloadOrBuilder {
    private Payload() {
      hash_ = "";
      text_ = "";
      data_ = com.google.protobuf.ByteString.EMPTY;
      mimeType_ = "";
    }
    private int bitField0_;
    public static final int OP_CODE_FIELD_NUMBER = 1;
    private int opCode_;
    /**
     * <pre>
     *Type of message
     * </pre>
     *
     * <code>required uint32 op_code = 1 [default = 0];</code>
     */
    public boolean hasOpCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *Type of message
     * </pre>
     *
     * <code>required uint32 op_code = 1 [default = 0];</code>
     */
    public int getOpCode() {
      return opCode_;
    }
    /**
     * <pre>
     *Type of message
     * </pre>
     *
     * <code>required uint32 op_code = 1 [default = 0];</code>
     */
    private void setOpCode(int value) {
      bitField0_ |= 0x00000001;
      opCode_ = value;
    }
    /**
     * <pre>
     *Type of message
     * </pre>
     *
     * <code>required uint32 op_code = 1 [default = 0];</code>
     */
    private void clearOpCode() {
      bitField0_ = (bitField0_ & ~0x00000001);
      opCode_ = 0;
    }

    public static final int HASH_FIELD_NUMBER = 2;
    private java.lang.String hash_;
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    public boolean hasHash() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    public java.lang.String getHash() {
      return hash_;
    }
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    public com.google.protobuf.ByteString
        getHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(hash_);
    }
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    private void setHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      hash_ = value;
    }
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    private void clearHash() {
      bitField0_ = (bitField0_ & ~0x00000002);
      hash_ = getDefaultInstance().getHash();
    }
    /**
     * <pre>
     *Can add a hash field for security, etc..
     * </pre>
     *
     * <code>optional string hash = 2;</code>
     */
    private void setHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      hash_ = value.toStringUtf8();
    }

    public static final int TEXT_FIELD_NUMBER = 3;
    private java.lang.String text_;
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public boolean hasText() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      text_ = value;
    }
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    private void clearText() {
      bitField0_ = (bitField0_ & ~0x00000004);
      text_ = getDefaultInstance().getText();
    }
    /**
     * <pre>
     *For text messages
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      text_ = value.toStringUtf8();
    }

    public static final int DATA_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     *For images, audio, video, etc.. (can be distinguished based on the type
     *Repeated means multiple files of same type can be sent at once
     * </pre>
     *
     * <code>optional bytes data = 4;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *For images, audio, video, etc.. (can be distinguished based on the type
     *Repeated means multiple files of same type can be sent at once
     * </pre>
     *
     * <code>optional bytes data = 4;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }
    /**
     * <pre>
     *For images, audio, video, etc.. (can be distinguished based on the type
     *Repeated means multiple files of same type can be sent at once
     * </pre>
     *
     * <code>optional bytes data = 4;</code>
     */
    private void setData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      data_ = value;
    }
    /**
     * <pre>
     *For images, audio, video, etc.. (can be distinguished based on the type
     *Repeated means multiple files of same type can be sent at once
     * </pre>
     *
     * <code>optional bytes data = 4;</code>
     */
    private void clearData() {
      bitField0_ = (bitField0_ & ~0x00000008);
      data_ = getDefaultInstance().getData();
    }

    public static final int MIME_TYPE_FIELD_NUMBER = 5;
    private java.lang.String mimeType_;
    /**
     * <code>optional string mime_type = 5;</code>
     */
    public boolean hasMimeType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string mime_type = 5;</code>
     */
    public java.lang.String getMimeType() {
      return mimeType_;
    }
    /**
     * <code>optional string mime_type = 5;</code>
     */
    public com.google.protobuf.ByteString
        getMimeTypeBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(mimeType_);
    }
    /**
     * <code>optional string mime_type = 5;</code>
     */
    private void setMimeType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      mimeType_ = value;
    }
    /**
     * <code>optional string mime_type = 5;</code>
     */
    private void clearMimeType() {
      bitField0_ = (bitField0_ & ~0x00000010);
      mimeType_ = getDefaultInstance().getMimeType();
    }
    /**
     * <code>optional string mime_type = 5;</code>
     */
    private void setMimeTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      mimeType_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, opCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeString(2, getHash());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeString(3, getText());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeString(5, getMimeType());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, opCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getHash());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getText());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getMimeType());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static Protobuf.ProtoMessage.Payload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Payload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Payload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Protobuf.ProtoMessage.Payload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Payload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Payload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Payload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Payload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Protobuf.ProtoMessage.Payload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Protobuf.ProtoMessage.Payload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Protobuf.ProtoMessage.Payload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code message.Payload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          Protobuf.ProtoMessage.Payload, Builder> implements
        // @@protoc_insertion_point(builder_implements:message.Payload)
        Protobuf.ProtoMessage.PayloadOrBuilder {
      // Construct using Protobuf.ProtoMessage.Payload.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *Type of message
       * </pre>
       *
       * <code>required uint32 op_code = 1 [default = 0];</code>
       */
      public boolean hasOpCode() {
        return instance.hasOpCode();
      }
      /**
       * <pre>
       *Type of message
       * </pre>
       *
       * <code>required uint32 op_code = 1 [default = 0];</code>
       */
      public int getOpCode() {
        return instance.getOpCode();
      }
      /**
       * <pre>
       *Type of message
       * </pre>
       *
       * <code>required uint32 op_code = 1 [default = 0];</code>
       */
      public Builder setOpCode(int value) {
        copyOnWrite();
        instance.setOpCode(value);
        return this;
      }
      /**
       * <pre>
       *Type of message
       * </pre>
       *
       * <code>required uint32 op_code = 1 [default = 0];</code>
       */
      public Builder clearOpCode() {
        copyOnWrite();
        instance.clearOpCode();
        return this;
      }

      /**
       * <pre>
       *Can add a hash field for security, etc..
       * </pre>
       *
       * <code>optional string hash = 2;</code>
       */
      public boolean hasHash() {
        return instance.hasHash();
      }
      /**
       * <pre>
       *Can add a hash field for security, etc..
       * </pre>
       *
       * <code>optional string hash = 2;</code>
       */
      public java.lang.String getHash() {
        return instance.getHash();
      }
      /**
       * <pre>
       *Can add a hash field for security, etc..
       * </pre>
       *
       * <code>optional string hash = 2;</code>
       */
      public com.google.protobuf.ByteString
          getHashBytes() {
        return instance.getHashBytes();
      }
      /**
       * <pre>
       *Can add a hash field for security, etc..
       * </pre>
       *
       * <code>optional string hash = 2;</code>
       */
      public Builder setHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setHash(value);
        return this;
      }
      /**
       * <pre>
       *Can add a hash field for security, etc..
       * </pre>
       *
       * <code>optional string hash = 2;</code>
       */
      public Builder clearHash() {
        copyOnWrite();
        instance.clearHash();
        return this;
      }
      /**
       * <pre>
       *Can add a hash field for security, etc..
       * </pre>
       *
       * <code>optional string hash = 2;</code>
       */
      public Builder setHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHashBytes(value);
        return this;
      }

      /**
       * <pre>
       *For text messages
       * </pre>
       *
       * <code>optional string text = 3;</code>
       */
      public boolean hasText() {
        return instance.hasText();
      }
      /**
       * <pre>
       *For text messages
       * </pre>
       *
       * <code>optional string text = 3;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       *For text messages
       * </pre>
       *
       * <code>optional string text = 3;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       *For text messages
       * </pre>
       *
       * <code>optional string text = 3;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       *For text messages
       * </pre>
       *
       * <code>optional string text = 3;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       *For text messages
       * </pre>
       *
       * <code>optional string text = 3;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <pre>
       *For images, audio, video, etc.. (can be distinguished based on the type
       *Repeated means multiple files of same type can be sent at once
       * </pre>
       *
       * <code>optional bytes data = 4;</code>
       */
      public boolean hasData() {
        return instance.hasData();
      }
      /**
       * <pre>
       *For images, audio, video, etc.. (can be distinguished based on the type
       *Repeated means multiple files of same type can be sent at once
       * </pre>
       *
       * <code>optional bytes data = 4;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return instance.getData();
      }
      /**
       * <pre>
       *For images, audio, video, etc.. (can be distinguished based on the type
       *Repeated means multiple files of same type can be sent at once
       * </pre>
       *
       * <code>optional bytes data = 4;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <pre>
       *For images, audio, video, etc.. (can be distinguished based on the type
       *Repeated means multiple files of same type can be sent at once
       * </pre>
       *
       * <code>optional bytes data = 4;</code>
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }

      /**
       * <code>optional string mime_type = 5;</code>
       */
      public boolean hasMimeType() {
        return instance.hasMimeType();
      }
      /**
       * <code>optional string mime_type = 5;</code>
       */
      public java.lang.String getMimeType() {
        return instance.getMimeType();
      }
      /**
       * <code>optional string mime_type = 5;</code>
       */
      public com.google.protobuf.ByteString
          getMimeTypeBytes() {
        return instance.getMimeTypeBytes();
      }
      /**
       * <code>optional string mime_type = 5;</code>
       */
      public Builder setMimeType(
          java.lang.String value) {
        copyOnWrite();
        instance.setMimeType(value);
        return this;
      }
      /**
       * <code>optional string mime_type = 5;</code>
       */
      public Builder clearMimeType() {
        copyOnWrite();
        instance.clearMimeType();
        return this;
      }
      /**
       * <code>optional string mime_type = 5;</code>
       */
      public Builder setMimeTypeBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMimeTypeBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:message.Payload)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Protobuf.ProtoMessage.Payload();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasOpCode()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Protobuf.ProtoMessage.Payload other = (Protobuf.ProtoMessage.Payload) arg1;
          opCode_ = visitor.visitInt(
              hasOpCode(), opCode_,
              other.hasOpCode(), other.opCode_);
          hash_ = visitor.visitString(
              hasHash(), hash_,
              other.hasHash(), other.hash_);
          text_ = visitor.visitString(
              hasText(), text_,
              other.hasText(), other.text_);
          data_ = visitor.visitByteString(
              hasData(), data_,
              other.hasData(), other.data_);
          mimeType_ = visitor.visitString(
              hasMimeType(), mimeType_,
              other.hasMimeType(), other.mimeType_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  opCode_ = input.readUInt32();
                  break;
                }
                case 18: {
                  String s = input.readString();
                  bitField0_ |= 0x00000002;
                  hash_ = s;
                  break;
                }
                case 26: {
                  String s = input.readString();
                  bitField0_ |= 0x00000004;
                  text_ = s;
                  break;
                }
                case 34: {
                  bitField0_ |= 0x00000008;
                  data_ = input.readBytes();
                  break;
                }
                case 42: {
                  String s = input.readString();
                  bitField0_ |= 0x00000010;
                  mimeType_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Protobuf.ProtoMessage.Payload.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:message.Payload)
    private static final Protobuf.ProtoMessage.Payload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Payload();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Protobuf.ProtoMessage.Payload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Payload> PARSER;

    public static com.google.protobuf.Parser<Payload> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
